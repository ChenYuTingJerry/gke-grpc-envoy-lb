// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/app/router"
	"github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/client/grpc"
	demo2 "github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/dispatcher/demo"
	"github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/domain/repository/demo"
	"github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/injector/api"
	demo4 "github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/receiver/demo"
	demo3 "github.com/jerry-yt-chen/gke-grpc-envoy-lb/http-service/internal/translator/demo"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	echoClient, cleanup, err := grpc.NewEchoGrpcClient()
	if err != nil {
		return nil, nil, err
	}
	repository := demo.ProvideRepositoryGrpc(echoClient)
	dispatcher := demo2.ProvideDispatcher(repository)
	translator := demo3.ProvideTranslator(dispatcher)
	receiver := demo4.ProvideReceiver(translator)
	v := api.ProvideReceiverList(receiver)
	ginRouter := router.ProvideRouteV1(v...)
	httpEngine := api.InitGinEngine(ginRouter)
	injector := &Injector{
		HttpEngine: httpEngine,
	}
	return injector, func() {
		cleanup()
	}, nil
}
