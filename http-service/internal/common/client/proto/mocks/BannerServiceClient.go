// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/jerry-yt-chen/banner-comp-svc/pkg/proto/bannerpb"

	"google.golang.org/protobuf/types/known/emptypb"

	"google.golang.org/grpc"

	"github.com/stretchr/testify/mock"
)

// BannerServiceClient is an autogenerated mock type for the BannerServiceClient type
type BannerServiceClient struct {
	mock.Mock
}

// GetBanners provides a mock function with given fields: ctx, in, opts
func (_m *BannerServiceClient) GetBanners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*bannerpb.GetBannersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bannerpb.GetBannersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *bannerpb.GetBannersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bannerpb.GetBannersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields: ctx, in, opts
func (_m *BannerServiceClient) Health(ctx context.Context, in *bannerpb.HealthRequest, opts ...grpc.CallOption) (*bannerpb.HealthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bannerpb.HealthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bannerpb.HealthRequest, ...grpc.CallOption) *bannerpb.HealthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bannerpb.HealthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bannerpb.HealthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
